openapi: 3.0.3
info:
  title: Band Baaja Hub API
  description: REST API for Event Planning & Management System
  version: 1.0.0
servers:
  - url: https://api.bandbaajahub.com/v1

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      summary: Login user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /events:
    get:
      summary: Get all events
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

    post:
      summary: Create a new event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /events/{eventId}:
    get:
      summary: Get event details
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

    put:
      summary: Update an event
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdate'
      responses:
        '200':
          description: Event updated

    delete:
      summary: Delete an event
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Event deleted

  /events/{eventId}/bookings:
    post:
      summary: Book a venue for an event
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreate'
      responses:
        '201':
          description: Booking confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'

  /payments:
    post:
      summary: Make a payment for booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          type: string

    UserRegister:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string

    Event:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        venueId:
          type: integer
        organizerId:
          type: integer

    EventCreate:
      type: object
      required: [title, startDate, endDate, venueId]
      properties:
        title:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        venueId:
          type: integer

    EventUpdate:
      type: object
      properties:
        title:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        venueId:
          type: integer

    Booking:
      type: object
      properties:
        id:
          type: integer
        eventId:
          type: integer
        venueId:
          type: integer
        status:
          type: string
        amount:
          type: number
          format: float

    BookingCreate:
      type: object
      required: [venueId, amount]
      properties:
        venueId:
          type: integer
        amount:
          type: number
          format: float

    Payment:
      type: object
      properties:
        id:
          type: integer
        bookingId:
          type: integer
        amount:
          type: number
        method:
          type: string
        status:
          type: string
        paidOn:
          type: string
          format: date-time

    PaymentRequest:
      type: object
      required: [bookingId, amount, method]
      properties:
        bookingId:
          type: integer
        amount:
          type: number
        method:
          type: string
